{"version":3,"sources":["redux/reducers/index.js","redux/actions/actions.js","components/total/Total.js","components/matrix/Matrix.js","components/mean/Mean.js","components/app/App.js","redux/store.js","index.js"],"names":["Type","shortid","require","Total","props","onShowPerc","onClearShowPerc","eachTotal","className","map","elem","idx","onMouseEnter","onMouseLeave","data-id-row","Matrix","onInc","onClearShowCell","matrix","idShowCell","percCell","m","n","style","width","height","groupElem","idxRow","idxCol","includes","id","onClick","data-id-col","cells","amount","Mean","eachMean","App","this","onAddStr","onDelStr","onShowCell","state","React","Component","connect","dispatch","e","type","payload","target","actions","onUpdate","innerText","item","int","min","max","Math","ceil","floor","random","initialState","Number","prompt","x","i","undefined","j","calcTotal","c","length","sumElem","push","calcMean","h","summ","l","round","reducer","element","find","currentElem","el","findIndex","newMatrix","newState","delMatrix","upState","slice","allAmount","currId","currAmount","sortable","Object","keys","sort","a","b","perCell","dataset","idRow","perc","store","createStore","devToolsEnhancer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e07e41a.chunk.js","sourcesContent":["import { Type } from \"../actions/actions\";\r\n\r\nconst int = function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\nconst initialState = {\r\n  idShowCell: [],\r\n  eachTotal: [],\r\n  eachMean: [],\r\n  percCell: [],\r\n  m: Number(prompt(\"Введите количество строк\")),\r\n  n: Number(prompt(\"Введите количество столбиков\")),\r\n  x: Number(prompt(\"Введите количество ближайших по значению ячеек \")),\r\n  matrix: [],\r\n};\r\n// =================================================================================\r\n// Создание матрицы\r\nfor (let i = 0; i < initialState.m; i++) {\r\n  if (initialState.matrix[i] === undefined) {\r\n    initialState.matrix[i] = [];\r\n  }\r\n  for (let j = 0; j < initialState.n; j++) {\r\n    initialState.matrix[i][j] = { id: i + \"\" + j, amount: int(100, 1000) };\r\n  }\r\n}\r\n\r\n// ==========================================================================================\r\n// Нахождение суммы ячеек строки\r\nconst calcTotal = (state) => {\r\n  state.eachTotal = [];\r\n  for (let c = 0; c < state.matrix.length; c++) {\r\n    let sumElem = 0;\r\n    state.matrix[c].map((elem) => sumElem += elem.amount);\r\n    state.eachTotal.push(sumElem);\r\n  }\r\n};\r\ncalcTotal(initialState);\r\n// =============================================================================================\r\n// Нахождение среднего значения суммы ячеек в столбце\r\nconst calcMean = (state) => {\r\n  state.eachMean = [];\r\n  for (let h = 0; h < state.n; h++) {\r\n    let summ = 0;\r\n    for (let l = 0; l < state.m; l++) {\r\n      summ += state.matrix[l][h].amount;\r\n    }\r\n    state.eachMean.push(Math.round(summ / state.m));\r\n  }\r\n};\r\ncalcMean(initialState);\r\n// =============================================================================\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case Type.INCREMENT:\r\n      const id = payload.id;\r\n      const element = state.matrix.find((elem) =>\r\n        elem.find((elem) => elem.id === id)\r\n      );\r\n      const currentElem = element.find((el) => el.id === id);\r\n      const idx = element.findIndex((elem) => elem.id === id);\r\n      element[idx] = {\r\n        ...currentElem,\r\n        amount: currentElem.amount + 1,\r\n      };\r\n      calcTotal(state);\r\n      calcMean(state);\r\n      return {\r\n        ...state,\r\n        matrix: [...state.matrix],\r\n      };\r\n    // ===================================================================================\r\n    case Type.ADD_STR:\r\n      const newMatrix = [...state.matrix];\r\n      newMatrix[state.m] = [];\r\n      for (let j = 0; j < state.n; j++) {\r\n        newMatrix[state.m][j] = {\r\n          id: state.m + \"\" + j,\r\n          amount: int(100, 1000),\r\n        };\r\n      }\r\n      const newState = { ...state, m: state.m + payload, matrix: newMatrix };\r\n      calcTotal(newState);\r\n      calcMean(newState);\r\n      return newState;\r\n    // ===============================================================================\r\n    case Type.DEL_STR:\r\n      const delMatrix = [...state.matrix];\r\n      if (delMatrix.length === 1) {\r\n        return { ...state, matrix: delMatrix };\r\n      }\r\n      const upState = {\r\n        ...state,\r\n        m: state.m - payload,\r\n        matrix: delMatrix.slice(0, -1),\r\n      };\r\n      calcTotal(upState);\r\n      calcMean(upState);\r\n      return upState;\r\n    // =====================================================================\r\n    case Type.SHOW_CELL:\r\n      let allAmount = {};\r\n      for (let i = 0; i < state.m; i++) {\r\n        for (let j = 0; j < state.n; j++) {\r\n          let currId = i + \"\" + j;\r\n          if (payload.id === currId) continue;\r\n          let currAmount =\r\n            state.matrix[i][j].amount >= 0\r\n              ? state.matrix[i][j].amount - payload.amount\r\n              : -state.matrix[i][j].amount - payload.amount;\r\n          allAmount[currId] = currAmount >= 0 ? currAmount : -currAmount;\r\n        }\r\n      }\r\n      const sortable = Object.keys(allAmount).sort(function (a, b) {\r\n        return allAmount[a] - allAmount[b];\r\n      });\r\n      return { ...state, idShowCell: sortable.slice(0, state.x) };\r\n    // ===========================================================================\r\n    case Type.CLEAR_SHOW_CELL:\r\n      return { ...state, idShowCell: [] };\r\n    case Type.PERCENT_CONTRIBUTION:\r\n      \r\n      let perCell = {\r\n        id: Number(payload.item.dataset.idRow),\r\n        cells: [],\r\n      };\r\n      for (let j = 0; j < state.n; j++) {\r\n        let perc =\r\n          (state.matrix[perCell.id][j].amount / payload.item.innerText) * 100;\r\n        perCell.cells.push(Math.round(perc));\r\n      }\r\n      return { ...state, percCell: perCell };\r\n    case Type.CLEAR_PERCENT_CONTRIBUTION:\r\n      return { ...state, percCell: [] };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default reducer;\r\n","export const Type = {\r\n  INCREMENT: \"INCREMENT\",\r\n  ADD_STR: \"ADD_STR\",\r\n  DEL_STR: \"DEL_STR\",\r\n  UPDATE: \"UPDATE\",\r\n  SHOW_CELL: \"SHOW_CELL\",\r\n  PERCENT_CONTRIBUTION: \"PERCENT_CONTRIBUTION\",\r\n  CLEAR_SHOW_CELL: \"CLEAR_SHOW_CELL\",\r\n  CLEAR_PERCENT_CONTRIBUTION: \"CLEAR_PERCENT_CONTRIBUTION\",\r\n};\r\nexport const clearShowCell = () => ({\r\n  type: Type.CLEAR_SHOW_CELL,\r\n});\r\nexport const clearPercentContribution = () => ({\r\n  type: Type.CLEAR_PERCENT_CONTRIBUTION,\r\n});\r\nexport const showPercentContribution = (e) => ({\r\n  type: Type.PERCENT_CONTRIBUTION,\r\n  payload: { item: e.target, amount: e.target.innerText },\r\n});\r\nexport const showCell = (e) => ({\r\n  type: Type.SHOW_CELL,\r\n  payload: { id: e.target.id, amount: e.target.innerText },\r\n});\r\nexport const increment = (e) => ({\r\n  type: Type.INCREMENT,\r\n  payload: {\r\n    id: e.target.id,\r\n  },\r\n});\r\n\r\nexport const addStr = () => ({\r\n  type: Type.ADD_STR,\r\n  payload: 1,\r\n});\r\nexport const delStr = () => ({\r\n  type: Type.DEL_STR,\r\n  payload: 1,\r\n});\r\nexport const updateTotal = () => ({\r\n  type: Type.UPDATE,\r\n});\r\n","import React from \"react\";\r\nimport \"./Total.css\";\r\nconst shortid = require(\"shortid\");\r\n\r\nconst Total = ({ props, onShowPerc, onClearShowPerc }) => {\r\n  const { eachTotal } = props;\r\n  return (\r\n    <ul className=\"block-total\">\r\n      {eachTotal.map((elem, idx) => {\r\n        return (\r\n          <li\r\n            key={shortid()}\r\n            className=\"cell-total\"\r\n            onMouseEnter={onShowPerc}\r\n            onMouseLeave={onClearShowPerc}\r\n            data-id-row={idx}\r\n          >\r\n            {elem}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Total;\r\n","import React from \"react\";\r\nimport \"./Matrix.css\";\r\nconst shortid = require(\"shortid\");\r\n\r\nconst Matrix = ({ props, onInc, onMouseEnter, onClearShowCell }) => {\r\n  const { matrix, idShowCell, percCell, m , n} = props;\r\n  return (\r\n    <ul\r\n      className=\"matrix\"\r\n      style={{ width: 96 * n + \"px\", height: 96 * m + \"px\" }}\r\n    >\r\n      {matrix.map((groupElem, idxRow) => {\r\n        return groupElem.map((elem, idxCol) => {\r\n          return (\r\n            <li\r\n              key={shortid()}\r\n              className={\"cell \" + (idShowCell.includes(elem.id) ? \"show\" : \"\")}\r\n              onClick={onInc}\r\n              onMouseEnter={onMouseEnter}\r\n              onMouseLeave={onClearShowCell}\r\n              id={elem.id}\r\n              data-id-row={idxRow}\r\n              data-id-col={idxCol}\r\n            >\r\n              {percCell.id === idxRow\r\n                ? percCell.cells[idxCol] + \"%\"\r\n                : elem.amount}\r\n              <span\r\n                className=\"perc-cell\"\r\n                style={{\r\n                  height:\r\n                    (percCell.id === idxRow ? percCell.cells[idxCol] : 0) +\r\n                    \"px\",\r\n                }}\r\n              ></span>\r\n            </li>\r\n          );\r\n        });\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Matrix;\r\n","import React from 'react';\r\nimport \"./Mean.css\";\r\nconst shortid = require(\"shortid\");\r\n\r\n const Mean = ({props}) => {\r\n     const { eachMean } = props;\r\n     return (\r\n       <ul className=\"block-cell-mean\">\r\n         {eachMean.map((elem) => {\r\n           return (\r\n             <li key={shortid()} className=\"cell-mean\">\r\n               {elem}\r\n             </li>\r\n           );\r\n         })}\r\n       </ul>\r\n     );\r\n }\r\n \r\n export default Mean;","import React from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/actions/actions\";\nimport Total from \"../total/Total\";\nimport Matrix from \"../matrix/Matrix\";\nimport Mean from \"../mean/Mean\";\n\nclass App extends React.Component {\n  render() {\n    const {\n      onAddStr,\n      onDelStr,\n      onInc,\n      onShowCell,\n      onShowPerc,\n      onClearShowCell,\n      onClearShowPerc,\n    } = this.props;\n    return (\n      <div className=\"main-block\">\n        <div className=\"wrapper\">\n          <Matrix\n            props={this.props.state}\n            onInc={onInc}\n            onMouseEnter={onShowCell}\n            onClearShowCell={onClearShowCell}\n          />\n          <Total\n            props={this.props.state}\n            onShowPerc={onShowPerc}\n            onClearShowPerc={onClearShowPerc}\n          />\n          <div className=\"block-btn\">\n            <button className=\"add-btn btn\" onClick={onAddStr}>\n              add str\n            </button>\n            <button className=\"del-btn btn\" onClick={onDelStr}>\n              dell str\n            </button>\n          </div>\n        </div>\n        <Mean props={this.props.state} />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  state: state,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  onInc: (e) => {\n    dispatch(actions.increment(e));\n  },\n  onAddStr: () => {\n    dispatch(actions.addStr(1));\n  },\n  onDelStr: (id) => {\n    dispatch(actions.delStr(id));\n  },\n  onUpdate: () => {\n    dispatch(actions.updateTotal());\n  },\n  onShowCell: (e) => {\n    dispatch(actions.showCell(e));\n  },\n  onClearShowCell: () => {\n    dispatch(actions.clearShowCell());\n  },\n  onShowPerc: (e) => {\n    dispatch(actions.showPercentContribution(e));\n  },\n  onClearShowPerc: () => {\n    dispatch(actions.clearPercentContribution());\n  },\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createStore } from \"redux\";\r\nimport {devToolsEnhancer} from \"redux-devtools-extension\";\r\nimport reducer from \"./reducers/index\";\r\n\r\nconst store = createStore(reducer, devToolsEnhancer());\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n// import Test from \"./components/cells/Test\";\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}